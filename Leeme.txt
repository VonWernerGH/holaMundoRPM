El proyecto "holaMundoRPM" es un proyecto ejemplo de como empaquetar un programa como holaMundoRPM.c en RPM.

Para crear un RPM se requieren los siguientes pasos:

1.- Instalar la herramienta rpmdevtools.
    $ sudo urpmi rpmdevtools
2.- Ejecutar el comando rpmdev-setuptree, este comando crea la estructura para la construcción del archivo RPM.
    $ rpmdev-setuptree
    
    Al finalizar, se abra creado la siguiente estructura:
    /home/user/rpmbuild/
   ├── BUILD
   ├── BUILDROOT
   ├── RPMS
   ├── SOURCES
   ├── SPECS
   └── SRPMS

3.- Ejecutar el comando rpmdev-newspec holaMundoRPM
    $ rpmdev-newspec ~/rpmbuild/SPECS/holaMundoRPM
    
    Este comando crea el archivo holaMundoRPM.spec en el directorio ~/rpmbuild/SPECS/, el cual modificaremos según nuestras necesidades.

4.- Modificar el archivo ~/rpmbuild/SPECS/holaMundoRPM.spec con los datos de nuestra aplicación.
5.- Ejecutar el comando:
    $ rpmbuild -ba ~/rpmbuild/SPECS/holaMundoRPM.spec
    
    Este comando realiza todo el proceso de creación del RPM.

El archivo holaMundoRPM.spec es un guión de construcción con una optimización ligera/media con información de depuración, la instrucción de compilación es la siguiente:

gcc -O2 -g -fno-omit-frame-pointer -mtune=generic -fstack-protector-strong -D_FORTIFY_SOURCE=2 -pie -fPIE -Wall -Werror -Wl,--as-needed -o %{name} %{name}.c

Las banderas activas son las siguientes:

-O2: Esta opción aplica optimizaciones comunes sin aumentar demasiado el tiempo de compilación ni comprometer la depuración. Es la opción recomendada para compilaciones de distribución.
-g: Incluye información básica de depuración en el binario, que luego puede separarse en archivos de depuración independientes.
-fno-omit-frame-pointer: No omite el puntero de marco, lo que facilita la depuración y el análisis post-mortem (core dumps). 
-mtune=generic: Generar un código optimizado para una amplia gama de CPUs.
-fstack-protector-strong: Añade protecciones contra desbordamiento de pila, mejorando la seguridad del programa.
-D_FORTIFY_SOURCE=2: Activa algunas optimizaciones adicionales en funciones estándar de C para mejorar la seguridad. Es ampliamente usado en distribuciones Linux.
-pie -fPIE: Para generar un ejecutable independiente de la posición, útil para mejorar la seguridad al usar Address Space Layout Randomization (ASLR).
-Wall: Activa un conjunto de advertencias que pueden ayudar a identificar posibles errores o malas prácticas en el código.
-Werror: Convierte todas las advertencias en errores. Esto significa que si el compilador encuentra algo que normalmente advertiría, fallará la compilación.
-Wl,--as-needed: Es una opción que se pasa al enlazador (ld) y le indica que solo incluya en el ejecutable las bibliotecas que realmente se utilizan, evitando dependencias innecesarias.

Detalles a considerar en la construcción del RPM:

- El archivo .spec (holaMundoRPM.spec) se deberá colocar en ~/rpmbuild/SPECS
- Se requiere un archivo .tar.gz que contendrá el código fuente del programa, este archivo deberá ser construido con los archivos del proyecto dentro de un directorio con el nombre del proyecto un guión y la versión, en el caso de holaMundoRPM la versión es la 1.0.0 por lo que el archivo .tar.gz se puede construir como sigue:

    $ tar -czvf ~/rpmbuild/SOURCES/holaMundoRPM-1.0.0.tar.gz holaMundoRPM-1.0.0/

    - Donde holaMundo-1.0.0/ es el directorio que contiene los archivos del proyecto.
    - El nombre del archivo .tar.gz debe incluir también el nombre y la versión, en este caso holaMundoRPM-1.0.0.tar.gz.
    - Como se observa en la instrucción, al decirle a tar que construya el comprimido, también se le instruye para que de una vez lo posicione en su directorio correspondiente ~/rpmbuild/SOURCES
- Al finalizar de construir los archivos RPM con la siguiente instrucción:
    rpmbuild -ba ~/rpmbuild/SPECS/holaMundoRPM.spec
    
    Serán 2 los archivos RPM construidos, uno con los binarios y uno con los archivos para la construcción del RPM, en caso de holaMundoRPM son:
    /home/victor/rpmbuild/SRPMS/holaMundoRPM-1.0.0-1.mga9.src.rpm
    /home/victor/rpmbuild/RPMS/x86_64/holaMundoRPM-1.0.0-1.mga9.x86_64.rpm


El archivo holaMundoRPMNoDebug.spec es un guión de construcción con una optimización para generar una versión de release, sin debug y optimizado al máximo, la instrucción de compilación es la siguiente:

gcc -Wall -Werror -Wl,--as-needed -O3 -g0 -s -march=native -flto -o %{name} %name.c

Las banderas activas son las siguientes:

-Wall: Activa un conjunto de advertencias que pueden ayudar a identificar posibles errores o malas prácticas en el código.
-Werror: Convierte todas las advertencias en errores. Esto significa que si el compilador encuentra algo que normalmente advertiría, fallará la compilación.
-Wl,--as-needed: Es una opción que se pasa al enlazador (ld) y le indica que solo incluya en el ejecutable las bibliotecas que realmente se utilizan, evitando dependencias innecesarias.
-O3: Aplica la optimización más agresiva disponible en gcc, lo que mejora el rendimiento del programa.
-g0: Elimina toda información de depuración.
-s: Eliminar código no usado, quita símbolos de depuración y minimizar el tamaño del ejecutable, eliminando secciones innecesarias.
-march=native: Compila el código optimizado para la arquitectura de la CPU donde se está ejecutando la compilación, esta opción hay que usarla con cuidado, ya que que puede causar problemas en otros sistemas, por haber optimizado para la arquitectura de la CPU donde se está ejecutando la compilación.
-flto: Usa la optimización de tiempo de enlace (Link Time Optimization) para hacer una optimización global entre los módulos del programa.

El archivo spec holaMundoRPMNoDebug.spec, este guión de construcción de RPM incluye la directiva:

%global debug_package %{nil}

La cual le dice al sistema de construcción RPM que no cree el subpaquete debuginfo, por lo que el ejecutable no deberá incluir información de depuración, es útil cuando el release esta optimizado al máximo para eficiencia en velocidad y tamaño, lo cual no incluye información de depuración, el archivo holaMundoRPM.spec esta optimizado al máximo con la siguiente orden de compilación:

   
Víctor Emmanuel Rivero Alonzo
2024/10/08

    
    
